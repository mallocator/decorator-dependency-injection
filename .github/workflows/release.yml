name: Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x, 23.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Get package.json version
        id: package_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin "v${VERSION}" | wc -l)
          echo "TAG_EXISTS=${TAG_EXISTS}" >> $GITHUB_ENV

      - name: Get commit messages
        id: commit_messages
        run: |
          COMMITS=$(git log --pretty=format:"%h - %s" $(git describe --tags --abbrev=0 @^)..@ | while read -r hash msg; do echo "[${hash}](https://github.com/${{ github.repository }}/commit/${hash}) - ${msg}"; done)
          echo "COMMITS=${COMMITS}" >> $GITHUB_ENV

      - name: Create Tag and Release
        uses: actions/github-script@v7
        with:
          script: |
            const version = process.env.VERSION
            const tag = `v${version}`
            const commits = process.env.COMMITS
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            
            if (!tags.find(t => t.name === tag)) {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: context.sha,
              })
            
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `Release ${tag}`,
                body: `Automated release of version ${tag}\n\nCommits:\n${commits}`,
                draft: false,
                prerelease: false,
              })
              core.notice(`Release ${tag} created.`)
            } else {
              core.notice(`Release ${tag} already exists. No new release created.`)
            }

  publish:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'

      - name: Get package.json version
        id: package_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Check if version exists on npm
        id: check_npm_version
        run: |
          if npm show decorator-dependency-injection@${{ env.VERSION }} > /dev/null 2>&1; then
            echo "VERSION_EXISTS=true" >> $GITHUB_ENV
          else
            echo "VERSION_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Publish to npm
        if: env.VERSION_EXISTS == 'false'
        run: | 
          npm publish --access public
          echo "::notice::Published new version ${{ env.VERSION }} to npm."
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notice Publish Status
        if: env.VERSION_EXISTS == 'true'
        run: echo "::notice::Version ${{ env.VERSION }} already exists on npm. No new version published."


